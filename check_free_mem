#!perl -- ## no critic (Modules::ProhibitExcessMainComplexity)

use strict;
use warnings;

use 5.00800;

use Carp;
use Data::Dumper;
use English qw(-no_match_vars);
use File::Slurp;
use Getopt::Long;
use Monitoring::Plugin;
use Monitoring::Plugin::Getopt;
use Monitoring::Plugin::Threshold;
use Readonly;

our $VERSION = '1.2.0';

# IMPORTANT: Nagios plugins could be executed using embedded perl in this case
#            the main routine would be executed as a subroutine and all the
#            declared subroutines would therefore be inner subroutines
#            This will cause all the global lexical variables not to stay shared
#            in the subroutines!
#
# All variables are therefore declared as package variables...
#
## no critic (ProhibitPackageVars)
use vars qw(
  $buffers
  $cached
  $critical
  $free
  $help
  $line
  $plugin
  $result
  $shared
  $threshold
  $total
  $used
  $verbosity
  $warning
);

##############################################################################
# subroutines

##############################################################################
# Usage     : usage( -message => 'some text', -exitval => 1 )
# Purpose   : prints a usage message
# Returns   : n/a
# Arguments : -message : an optional error message
#             -exitval : the exit code (defaults to 0)
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub usage {

    my %args = @_;

    my $exitval = 0;
    if ( $args{-exitval} ) {
        $exitval = $args{-exitval};
    }

    if ( $args{-message} ) {
        #<<<
        print $args{-message}; ## no critic (RequireCheckedSyscall)
        #>>>
    }

    #<<<
    print <<'EOT'; ## no critic (RequireCheckedSyscall)
        check_free_mem --critical=critical --warning=warning
                   [--verbose]
                   [--version|--help]

        Mandatory arguments:
         --critical,-c   critical   specify the minumal percentage free memory
         --warning,-w    warning    specify warning threshold for the percentage of free memory

        Options:
         --version,V                print version number
         --verbose,-v               be more verbose (can be repeated)
EOT
    #>>>
    exit $exitval;

}

##############################################################################
# Usage     : verbose("some message string", $optional_verbosity_level);
# Purpose   : write a message if the verbosity level is high enough
# Returns   : n/a
# Arguments : message : message string
#             level   : options verbosity level
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub verbose {

    # arguments
    my $message = shift;
    my $level   = shift;

    if ( !defined $message ) {
        $plugin->nagios_exit( $plugin->UNKNOWN,
            q{Internal error: not enough parameters for 'verbose'} );
    }

    if ( !defined $level ) {
        $level = 0;
    }

    if ( $level < $verbosity ) {
        #<<<
        print $message; ## no critic (RequireCheckedSyscall)
        #>>>
    }

    return;

}

##############################################################################
# Usage     : check_positive_integer($number)
# Purpose   : checks if the argument is a valid positive integer
# Returns   : true if the number is valid
# Arguments : number to test
# Throws    : n/a
# Comments  : n/a
# See also  : n/a
sub check_positive_integer {
    my $number = shift;
    return $number =~ /^\d+$/mxs;
}

sub get_value {
    
    my $string = shift;
    my @lines = @_;
    
    my @matching = grep { /^$string/ } @lines;
    if ( @matching != 1 ) {
	$plugin->nagios_exit(
	    $plugin->UNKNOWN,
	    "Error parsing /proc/meminfo: $string not found"
	    );
    }    
    $matching[0] =~ s/.+:\ +([0-9]+).+/$1/;    
    if ( ! check_positive_integer( $matching[0] ) ) {
	$plugin->nagios_exit(
	    $plugin->UNKNOWN,
	    "Error parsing /proc/meminfo: no value found for $string"
	    );
    }
    return $matching[0];

}

##############################################################################
# main

# initialization
$free = q{};

$plugin    = Monitoring::Plugin->new( shortname => 'CHECK_FREE_MEM' );
$verbosity = 0;

########################
# Command line arguments

Getopt::Long::Configure( 'bundling', 'no_ignore_case' );
$result = GetOptions(
    'free=s'       => \$free,
    'critical|c=i' => \$critical,
    'help|h|?'     => \$help,
    'verbose|v+'   => \$verbosity,
    'version|V'    => sub {
        #<<<
        print "check_free_mem version $VERSION\n"; ## no critic (RequireCheckedSyscall)
        #>>>
        exit 3;    ## no critic (ValuesAndExpressions::ProhibitMagicNumbers)
    },
    'warning|w=i' => \$warning,
);

#############################
# Sanity checks: command line

if ( !$result ) {
    usage( -exitval => $plugin->UNKNOWN, );
}

if ($help) {
    usage( -exitval => $plugin->UNKNOWN, );
}
if (   !defined $critical
    || !$critical =~ /\d+/mxs
    || $critical < 0
    || $critical >
    100 )    ## no critic (ValuesAndExpressions::ProhibitMagicNumbers)
{
    usage(
        -exitval => $plugin->UNKNOWN,
        -message => 'Could not parse "critical"',
    );
}
if (   !defined $critical
    || !$warning =~ /\d+/mxs
    || $warning < 0
    || $warning >
    100 )    ## no critic (ValuesAndExpressions::ProhibitMagicNumbers)
{
    usage(
        -exitval => $plugin->UNKNOWN,
        -message => 'Could not parse "warning"',
    );
}
if ( $critical > $warning ) {
    usage(
        -exitval => $plugin->UNKNOWN,
        -message => '"critical" has to be smaller than "warning"',
    );
}

$threshold = Monitoring::Plugin::Threshold->set_thresholds(
    warning  => 100 - $warning,
    critical => 100 - $critical,
);

if ( ! -r '/proc/meminfo' ) {
    $plugin->plugin_exit( UNKNOWN, '/proc/meminfo is not readable' );
}

###########################################
# get memory information from /proc/meminfo

my $output;

verbose "Reading /proc/meminfo\n";

open $output, q{<}, '/proc/meminfo'
    or $plugin->nagios_exit(
	$plugin->UNKNOWN,
	"Cannot open /proc/meminfo: $OS_ERROR"
    );

# read the whole file
my @lines = read_file($output);

chomp @lines;

if (  !( close $output ) )
{
    $plugin->nagios_exit(
	$plugin->UNKNOWN,
	"Error while closing /proc/meminfo: $OS_ERROR"
	);
}

if ( $verbosity > 1 ) {
    for my $line (@lines) {
        verbose "$line\n", 1;
    }
}

$free  = get_value( 'MemAvailable', @lines );
$total = get_value( 'MemTotal', @lines );

$plugin->add_perfdata(
    label => 'total',
    value => $total,
    uom   => 'kB',
);

$plugin->add_perfdata(
    label => 'free',
    value => $free,
    uom   => 'kB',
);

$plugin->nagios_exit(
    $threshold->get_status( 100 - $free / $total * 100 ) , 
    'free ' . ( sprintf '%.0f', $free/ $total * 100  ) . q{%}
);

1;
